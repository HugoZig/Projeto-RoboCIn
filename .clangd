CompileFlags: # Tweak the parse settings
  Add: [-xc++,
        -Wall,
        -Wextra,
        -Werror,
        -Wno-unused-variable,
        -Wno-infinite-recursion,
        -Werror=implicit-function-declaration,
        -Wshadow,
        -Wno-shadow-field-in-constructor-modified,
        -Wno-shadow-ivar,
        -Wuninitialized,
        -Wunused-label,
        -Wunused-lambda-capture]
 
Index:
  Background: Build # Build a type + incoming reference index in the background
 
Diagnostics:
  # https://clang.llvm.org/extra/clang-tidy/
  # https://confluence.jetbrains.com/display/CLION/Clang-Tidy+in+CLion%3A+default+configuration
  
  ClangTidy:
    Add: [
    # Checks related to Abseil library:
      abseil-duration-addition,
      abseil-duration-comparison,
      abseil-duration-conversion-cast,
      abseil-duration-division,
      abseil-duration-factory-float,
      abseil-duration-factory-scale,
      abseil-duration-subtraction,
      abseil-duration-unnecessary-conversion,
      abseil-faster-strsplit-delimiter,
      abseil-no-internal-dependencies,
      abseil-no-namespace,
      abseil-redundant-strcat-calls,
      abseil-str-cat-append,
      abseil-string-find-startswith,
      abseil-time-comparison,
      abseil-time-subtraction,
      abseil-upgrade-duration-conversions,

    # Checks related to Android:
      # android-cloexec-accept,
      # android-cloexec-accept4,
      # android-cloexec-creat,
      # android-cloexec-dup,
      # android-cloexec-epoll-create,
      # android-cloexec-epoll-create1,
      # android-cloexec-fopen,
      # android-cloexec-inotify-init,
      # android-cloexec-inotify-init1,
      # android-cloexec-memfd-create,
      # android-cloexec-open,
      # android-cloexec-pipe,
      # android-cloexec-pipe2,
      # android-cloexec-socket,
      # android-comparison-in-temp-failure-retry,

    # Checks that target bugprone code constructs.
      bugprone-argument-comment,
      bugprone-assert-side-effect,
      bugprone-bad-signal-to-kill-thread,
      # bugprone-bool-pointer-implicit-conversion,
      bugprone-branch-clone,
      bugprone-copy-constructor-init,
      bugprone-dangling-handle,
      bugprone-dynamic-static-initializers,
      # bugprone-exception-escape,
      bugprone-fold-init-type,
      bugprone-forward-declaration-namespace,
      bugprone-forwarding-reference-overload,
      bugprone-inaccurate-erase,
      bugprone-incorrect-roundings,
      # bugprone-infinite-loop,
      bugprone-integer-division,
      bugprone-lambda-function-name,
      bugprone-macro-parentheses,
      bugprone-macro-repeated-side-effects,
      bugprone-misplaced-operator-in-strlen-in-alloc,
      bugprone-misplaced-pointer-arithmetic-in-alloc,
      bugprone-misplaced-widening-cast,
      bugprone-move-forwarding-reference,
      bugprone-multiple-statement-macro,
      bugprone-narrowing-conversions,
      bugprone-not-null-terminated-result,
      bugprone-parent-virtual-call,
      bugprone-posix-return,
      bugprone-reserved-identifier,
      # bugprone-signed-char-misuse,
      bugprone-sizeof-container,
      bugprone-sizeof-expression,
      bugprone-string-constructor,
      bugprone-string-integer-assignment,
      bugprone-string-literal-with-embedded-nul,
      bugprone-suspicious-enum-usage,
      bugprone-suspicious-memset-usage,
      bugprone-suspicious-missing-comma,
      bugprone-suspicious-semicolon,
      bugprone-suspicious-string-compare,
      bugprone-swapped-arguments,
      bugprone-terminating-continue,
      bugprone-throw-keyword-missing,
      bugprone-too-small-loop-variable,
      bugprone-undefined-memory-manipulation,
      bugprone-undelegated-constructor,
      bugprone-unhandled-self-assignment,
      bugprone-unused-raii,
      bugprone-unused-return-value,
      bugprone-use-after-move,
      bugprone-virtual-near-miss,
    
    # Checks related to Boost library.
      boost-use-to-string,
    
    # Checks related to CERT Secure Coding Guidelines.
      cert-dcl03-c,
      # cert-dcl16-c,
      cert-dcl21-cpp,
      # cert-dcl37-c,
      # cert-dcl50-cpp,
      # cert-dcl51-cpp,
      # cert-dcl54-cpp,
      cert-dcl58-cpp,
      # cert-dcl59-cpp,
      # cert-env33-c,
      # cert-err09-cpp,
      cert-err34-c,
      cert-err52-cpp,
      cert-err58-cpp,
      cert-err60-cpp,
      # cert-err61-cpp,
      # cert-fio38-c,
      cert-flp30-c,
      # cert-mem57-cpp,
      # cert-msc30-c,
      # cert-msc32-c,
      cert-msc50-cpp,
      cert-msc51-cpp,
      # cert-oop11-cpp,
      cert-oop54-cpp,
      # cert-oop57-cpp,
      # cert-oop58-cpp,
      # cert-pos44-c,
    
    # Clang Static Analyzer checks.
      # clang-analyzer-apiModeling.StdCLibraryFunctions,
      # clang-analyzer-apiModeling.TrustNonnull,
      # clang-analyzer-apiModeling.google.GTest,
      # clang-analyzer-apiModeling.llvm.CastValue,
      # clang-analyzer-apiModeling.llvm.ReturnValue,
      # clang-analyzer-core.CallAndMessage,
      # clang-analyzer-core.DivideZero,
      # clang-analyzer-core.DynamicTypePropagation,
      # clang-analyzer-core.NonNullParamChecker,
      # clang-analyzer-core.NonnilStringConstants,
      # clang-analyzer-core.NullDereference,
      # clang-analyzer-core.StackAddrEscapeBase,
      # clang-analyzer-core.StackAddressEscape,
      # clang-analyzer-core.UndefinedBinaryOperatorResult,
      # clang-analyzer-core.VLASize,
      # clang-analyzer-core.builtin.BuiltinFunctions,
      # clang-analyzer-core.builtin.NoReturnFunctions,
      # clang-analyzer-core.uninitialized.ArraySubscript,
      # clang-analyzer-core.uninitialized.Assign,
      # clang-analyzer-core.uninitialized.Branch,
      # clang-analyzer-core.uninitialized.CapturedBlockVariable,
      # clang-analyzer-core.uninitialized.UndefReturn,
      # clang-analyzer-cplusplus.InnerPointer,
      # clang-analyzer-cplusplus.Move,
      # clang-analyzer-cplusplus.NewDelete,
      # clang-analyzer-cplusplus.NewDeleteLeaks,
      # clang-analyzer-cplusplus.PlacementNew,
      # clang-analyzer-cplusplus.PureVirtualCall,
      # clang-analyzer-cplusplus.SelfAssignment,
      # clang-analyzer-cplusplus.SmartPtr,
      # clang-analyzer-cplusplus.VirtualCallModeling,
      # clang-analyzer-deadcode.DeadStores,
      # clang-analyzer-fuchsia.HandleChecker,
      # clang-analyzer-nullability.NullPassedToNonnull,
      # clang-analyzer-nullability.NullReturnedFromNonnull,
      # clang-analyzer-nullability.NullabilityBase,
      # clang-analyzer-nullability.NullableDereferenced,
      # clang-analyzer-nullability.NullablePassedToNonnull,
      # clang-analyzer-nullability.NullableReturnedFromNonnull,
      # clang-analyzer-optin.cplusplus.VirtualCall,
      # clang-analyzer-optin.mpi.MPI-Checker,
      # clang-analyzer-optin.osx.OSObjectCStyleCast,
      # clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker,
      # clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker,
      # clang-analyzer-optin.performance.GCDAntipattern,
      # clang-analyzer-optin.performance.Padding,
      # clang-analyzer-optin.portability.UnixAPI,
      # clang-analyzer-osx.API,
      # clang-analyzer-osx.MIG,
      # clang-analyzer-osx.NSOrCFErrorDerefChecker,
      # clang-analyzer-osx.NumberObjectConversion,
      # clang-analyzer-osx.OSObjectRetainCount,
      # clang-analyzer-osx.ObjCProperty,
      # clang-analyzer-osx.SecKeychainAPI,
      # clang-analyzer-osx.cocoa.AtSync,
      # clang-analyzer-osx.cocoa.AutoreleaseWrite,
      # clang-analyzer-osx.cocoa.ClassRelease,
      # clang-analyzer-osx.cocoa.Dealloc,
      # clang-analyzer-osx.cocoa.IncompatibleMethodTypes,
      # clang-analyzer-osx.cocoa.Loops,
      # clang-analyzer-osx.cocoa.MissingSuperCall,
      # clang-analyzer-osx.cocoa.NSAutoreleasePool,
      # clang-analyzer-osx.cocoa.NSError,
      # clang-analyzer-osx.cocoa.NilArg,
      # clang-analyzer-osx.cocoa.NonNilReturnValue,
      # clang-analyzer-osx.cocoa.ObjCGenerics,
      # clang-analyzer-osx.cocoa.RetainCount,
      # clang-analyzer-osx.cocoa.RetainCountBase,
      # clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak,
      # clang-analyzer-osx.cocoa.SelfInit,
      # clang-analyzer-osx.cocoa.SuperDealloc,
      # clang-analyzer-osx.cocoa.UnusedIvars,
      # clang-analyzer-osx.cocoa.VariadicMethodTypes,
      # clang-analyzer-osx.coreFoundation.CFError,
      # clang-analyzer-osx.coreFoundation.CFNumber,
      # clang-analyzer-osx.coreFoundation.CFRetainRelease,
      # clang-analyzer-osx.coreFoundation.containers.OutOfBounds,
      # clang-analyzer-osx.coreFoundation.containers.PointerSizedValues,
      # clang-analyzer-security.FloatLoopCounter,
      # clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,
      # clang-analyzer-security.insecureAPI.SecuritySyntaxChecker,
      # clang-analyzer-security.insecureAPI.UncheckedReturn,
      # clang-analyzer-security.insecureAPI.bcmp,
      # clang-analyzer-security.insecureAPI.bcopy,
      # clang-analyzer-security.insecureAPI.bzero,
      # clang-analyzer-security.insecureAPI.decodeValueOfObjCType,
      # clang-analyzer-security.insecureAPI.getpw,
      # clang-analyzer-security.insecureAPI.gets,
      # clang-analyzer-security.insecureAPI.mkstemp,
      # clang-analyzer-security.insecureAPI.mktemp,
      # clang-analyzer-security.insecureAPI.rand,
      # clang-analyzer-security.insecureAPI.strcpy,
      # clang-analyzer-security.insecureAPI.vfork,
      # clang-analyzer-unix.API,
      # clang-analyzer-unix.DynamicMemoryModeling,
      # clang-analyzer-unix.Malloc,
      # clang-analyzer-unix.MallocSizeof,
      # clang-analyzer-unix.MismatchedDeallocator,
      # clang-analyzer-unix.Vfork,
      # clang-analyzer-unix.cstring.BadSizeArg,
      # clang-analyzer-unix.cstring.CStringModeling,
      # clang-analyzer-unix.cstring.NullArg,
      # clang-analyzer-valist.CopyToSelf,
      # clang-analyzer-valist.Uninitialized,
      # clang-analyzer-valist.Unterminated,
      # clang-analyzer-valist.ValistBase,
    
    # Checks related to C++ Core Guidelines.
      # cppcoreguidelines-avoid-c-arrays,
      # cppcoreguidelines-avoid-goto,
      # cppcoreguidelines-avoid-magic-numbers,
      # cppcoreguidelines-c-copy-assignment-signature,
      # cppcoreguidelines-explicit-virtual-functions,
      # cppcoreguidelines-init-variables,
      cppcoreguidelines-interfaces-global-init,
      # cppcoreguidelines-macro-usage,
      cppcoreguidelines-narrowing-conversions,
      # cppcoreguidelines-no-malloc,
      # cppcoreguidelines-non-private-member-variables-in-classes,
      # cppcoreguidelines-owning-memory,
      # cppcoreguidelines-pro-bounds-array-to-pointer-decay,
      # cppcoreguidelines-pro-bounds-constant-array-index,
      # cppcoreguidelines-pro-bounds-pointer-arithmetic,
      # cppcoreguidelines-pro-type-const-cast,
      # cppcoreguidelines-pro-type-cstyle-cast,
      cppcoreguidelines-pro-type-member-init,
      # cppcoreguidelines-pro-type-reinterpret-cast,
      cppcoreguidelines-pro-type-static-cast-downcast,
      # cppcoreguidelines-pro-type-union-access,
      # cppcoreguidelines-pro-type-vararg,
      cppcoreguidelines-slicing,
      # cppcoreguidelines-special-member-functions,
    
    # Checks related to Darwin coding conventions.
      # darwin-avoid-spinlock,
      # darwin-dispatch-once-nonstatic,
    
    # Checks related to Fuchsia coding conventions.
      # fuchsia-default-arguments-calls,
      # fuchsia-default-arguments-declarations,
      # fuchsia-header-anon-namespaces,
      # fuchsia-multiple-inheritance,
      # fuchsia-overloaded-operator,
      # fuchsia-restrict-system-includes,
      # fuchsia-statically-constructed-objects,
      # fuchsia-trailing-return,
      # fuchsia-virtual-inheritance,
    
    # Checks related to Google coding conventions.
      # google-build-explicit-make-pair,
      # google-build-namespaces,
      # google-build-using-namespace,
      google-default-arguments,
      google-explicit-constructor,
      # google-global-names-in-headers,
      # google-objc-avoid-nsobject-new,
      # google-objc-avoid-throwing-exception,
      # google-objc-function-naming,
      # google-objc-global-variable-declaration,
      # google-readability-avoid-underscore-in-googletest-name,
      # google-readability-braces-around-statements,
      # google-readability-casting,
      # google-readability-function-size,
      # google-readability-namespace-comments,
      # google-readability-todo,
      # google-runtime-int,
      google-runtime-operator,
      # google-runtime-references,
      # google-upgrade-googletest-case,
    
    # Checks related to High Integrity C++ Coding Standard.
      # hicpp-avoid-c-arrays,
      # hicpp-avoid-goto,
      # hicpp-braces-around-statements,
      # hicpp-deprecated-headers,
      hicpp-exception-baseclass,
      # hicpp-explicit-conversions,
      # hicpp-function-size,
      # hicpp-invalid-access-moved,
      # hicpp-member-init,
      # hicpp-move-const-arg,
      hicpp-multiway-paths-covered,
      # hicpp-named-parameter,
      # hicpp-new-delete-operators,
      # hicpp-no-array-decay,
      # hicpp-no-assembler,
      # hicpp-no-malloc,
      # hicpp-noexcept-move,
      hicpp-signed-bitwise,
      # hicpp-special-member-functions,
      # hicpp-static-assert,
      # hicpp-undelegated-constructor,
      # hicpp-uppercase-literal-suffix,
      # hicpp-use-auto,
      # hicpp-use-emplace,
      # hicpp-use-equals-default,
      # hicpp-use-equals-delete,
      # hicpp-use-noexcept,
      # hicpp-use-nullptr,
      # hicpp-use-override,
      # hicpp-vararg,
    
    # Checks related to the Linux Kernel coding conventions.
      # linuxkernel-must-check-errs,
    
    # Checks related to the LLVM coding conventions.
      # llvm-header-guard,
      # llvm-include-order,
      # llvm-namespace-comment,
      # llvm-prefer-isa-or-dyn-cast-in-conditionals,
      # llvm-prefer-register-over-unsigned,
      # llvm-qualified-auto,
      # llvm-twine-local,
    
    # Checks that we didn’t have a better category for.
      # misc-definitions-in-headers,
      misc-misplaced-const,
      misc-new-delete-overloads,
      misc-non-copyable-objects,
      # misc-non-private-member-variables-in-classes,
      misc-redundant-expression,
      misc-static-assert,
      misc-throw-by-value-catch-by-reference,
      misc-unconventional-assign-operator,
      misc-uniqueptr-reset-release,
      # misc-unused-alias-decls,
      # misc-unused-parameters,
      # misc-unused-using-decls,

    # Checks that advocate usage of modern (currently “modern” means “C++11”) language constructs.
      modernize-avoid-bind,
      # modernize-avoid-c-arrays,
      modernize-concat-nested-namespaces,
      modernize-deprecated-headers,
      modernize-deprecated-ios-base-aliases,
      modernize-loop-convert,
      modernize-make-shared,
      modernize-make-unique,
      modernize-pass-by-value,
      modernize-raw-string-literal,
      modernize-redundant-void-arg,
      modernize-replace-auto-ptr,
      modernize-replace-random-shuffle,
      modernize-return-braced-init-list,
      modernize-shrink-to-fit,
      modernize-unary-static-assert,
      modernize-use-auto,
      modernize-use-bool-literals,
      # modernize-use-default-member-init,
      modernize-use-emplace,
      modernize-use-equals-default,
      modernize-use-equals-delete,
      modernize-use-nodiscard,
      modernize-use-noexcept,
      modernize-use-nullptr,
      modernize-use-override,
      # modernize-use-trailing-return-type,
      modernize-use-transparent-functors,
      modernize-use-uncaught-exceptions,
      # modernize-use-using,
    
    # Checks related to MPI (Message Passing Interface).
      mpi-buffer-deref,
      mpi-type-mismatch,
    
    # Checks related to Objective-C coding conventions.
      # objc-avoid-nserror-init,
      # objc-forbidden-subclassing,
      # objc-missing-hash,
      # objc-property-declaration,
      # objc-super-self,
    
    # Checks related to OpenMP API.
      # openmp-exception-escape,
      openmp-use-default-none,
    
    # Checks that target performance-related issues.
      performance-faster-string-find,
      performance-for-range-copy,
      performance-implicit-conversion-in-loop,
      performance-inefficient-algorithm,
      performance-inefficient-string-concatenation,
      performance-inefficient-vector-operation,
      performance-move-const-arg,
      performance-move-constructor-init,
      performance-no-automatic-move,
      performance-noexcept-move-constructor,
      performance-trivially-destructible,
      performance-type-promotion-in-math-fn,
      performance-unnecessary-copy-initialization,
      performance-unnecessary-value-param,
    
    # Checks that target portability-related issues that don’t relate to any particular coding style.
      portability-simd-intrinsics,
    
    # Checks that target readability-related issues that don’t relate to any particular coding style.
      readability-avoid-const-params-in-decls,
      # readability-braces-around-statements,
      readability-const-return-type,
      readability-container-size-empty,
      readability-convert-member-functions-to-static,
      readability-delete-null-pointer,
      readability-deleted-default,
      # readability-else-after-return,
      # readability-function-size,
      # readability-identifier-naming,
      # readability-implicit-bool-conversion,
      readability-inconsistent-declaration-parameter-name,
      # readability-isolate-declaration,
      # readability-magic-numbers,
      readability-make-member-function-const,
      readability-misleading-indentation,
      readability-misplaced-array-index,
      # readability-named-parameter,
      readability-non-const-parameter,
      # readability-qualified-auto,
      # readability-redundant-access-specifiers,
      readability-redundant-control-flow,
      readability-redundant-declaration,
      readability-redundant-function-ptr-dereference,
      # readability-redundant-member-init,
      # readability-redundant-preprocessor,
      readability-redundant-smartptr-get,
      readability-redundant-string-cstr,
      readability-redundant-string-init,
      # readability-simplify-boolean-expr,
      readability-simplify-subscript-expr,
      readability-static-accessed-through-instance,
      readability-static-definition-in-anonymous-namespace,
      readability-string-compare,
      readability-uniqueptr-delete-release,
      # readability-uppercase-literal-suffix,
    
    # Checks related to Zircon kernel coding conventions.
      # zircon-temporary-objects,
    ]

    CheckOptions:
      modernize-replace-auto-ptr.IncludeStyle: llvm
      performance-move-const-arg.CheckTriviallyCopyableMove: 'true'
      modernize-use-auto.MinTypeNameLength: '5'
      readability-static-accessed-through-instance.NameSpecifierNestingThreshold: '3'
      bugprone-reserved-identifier.Invert: 'false'
      bugprone-unused-return-value.CheckedFunctions: '::std::async;::std::launder;::std::remove;::std::remove_if;::std::unique;::std::unique_ptr::release;::std::basic_string::empty;::std::vector::empty;::std::back_inserter;::std::distance;::std::find;::std::find_if;::std::inserter;::std::lower_bound;::std::make_pair;::std::map::count;::std::map::find;::std::map::lower_bound;::std::multimap::equal_range;::std::multimap::upper_bound;::std::set::count;::std::set::find;::std::setfill;::std::setprecision;::std::setw;::std::upper_bound;::std::vector::at;::bsearch;::ferror;::feof;::isalnum;::isalpha;::isblank;::iscntrl;::isdigit;::isgraph;::islower;::isprint;::ispunct;::isspace;::isupper;::iswalnum;::iswprint;::iswspace;::isxdigit;::memchr;::memcmp;::strcmp;::strcoll;::strncmp;::strpbrk;::strrchr;::strspn;::strstr;::wcscmp;::access;::bind;::connect;::difftime;::dlsym;::fnmatch;::getaddrinfo;::getopt;::htonl;::htons;::iconv_open;::inet_addr;::isascii;::isatty;::mmap;::newlocale;::openat;::pathconf;::pthread_equal;::pthread_getspecific;::pthread_mutex_trylock;::readdir;::readlink;::recvmsg;::regexec;::scandir;::semget;::setjmp;::shm_open;::shmget;::sigismember;::strcasecmp;::strsignal;::ttyname'
      cert-dcl16-c.NewSuffixes: 'L;LL;LU;LLU'
      readability-inconsistent-declaration-parameter-name.Strict: 'false'
      modernize-use-override.AllowOverrideAndFinal: 'false'
      modernize-pass-by-value.ValuesOnly: 'false'
      modernize-loop-convert.IncludeStyle: llvm
      cert-str34-c.DiagnoseSignedUnsignedCharComparisons: 'false'
      bugprone-suspicious-string-compare.WarnOnLogicalNotComparison: 'false'
      readability-redundant-smartptr-get.IgnoreMacros: 'true'
      bugprone-argument-comment.CommentNullPtrs: '0'
      bugprone-suspicious-string-compare.WarnOnImplicitComparison: 'true'
      modernize-use-emplace.TupleTypes: '::std::pair;::std::tuple'
      modernize-use-emplace.TupleMakeFunctions: '::std::make_pair;::std::make_tuple'
      cppcoreguidelines-narrowing-conversions.WarnOnFloatingPointNarrowingConversion: 'true'
      bugprone-argument-comment.StrictMode: '0'
      modernize-use-nodiscard.ReplacementString: '[[nodiscard]]'
      modernize-loop-convert.MakeReverseRangeHeader: ''
      modernize-replace-random-shuffle.IncludeStyle: llvm
      modernize-use-bool-literals.IgnoreMacros: 'true'
      bugprone-unhandled-self-assignment.WarnOnlyIfThisHasSuspiciousField: 'true'
      google-readability-namespace-comments.ShortNamespaceLines: '10'
      bugprone-suspicious-string-compare.StringCompareLikeFunctions: ''
      modernize-avoid-bind.PermissiveParameterList: 'false'
      modernize-use-override.FinalSpelling: final
      performance-move-constructor-init.IncludeStyle: llvm
      modernize-loop-convert.UseCxx20ReverseRanges: 'true'
      modernize-use-noexcept.ReplacementString: ''
      performance-type-promotion-in-math-fn.IncludeStyle: llvm
      modernize-loop-convert.NamingStyle: CamelCase
      bugprone-suspicious-include.ImplementationFileExtensions: 'c;cc;cpp;cxx'
      cppcoreguidelines-pro-type-member-init.UseAssignment: 'false'
      bugprone-suspicious-missing-comma.SizeThreshold: '5'
      bugprone-suspicious-include.HeaderFileExtensions: ';h;hh;hpp;hxx'
      performance-no-automatic-move.AllowedTypes: ''
      performance-for-range-copy.WarnOnAllAutoCopies: 'false'
      bugprone-argument-comment.CommentIntegerLiterals: '0'
      modernize-loop-convert.MakeReverseRangeFunction: ''
      readability-inconsistent-declaration-parameter-name.IgnoreMacros: 'true'
      hicpp-multiway-paths-covered.WarnOnMissingElse: 'false'
      modernize-pass-by-value.IncludeStyle: llvm
      bugprone-sizeof-expression.WarnOnSizeOfThis: 'true'
      bugprone-string-constructor.WarnOnLargeLength: 'true'
      bugprone-too-small-loop-variable.MagnitudeBitsUpperLimit: '16'
      bugprone-argument-comment.CommentFloatLiterals: '0'
      bugprone-argument-comment.CommentCharacterLiterals: '0'
      modernize-use-nullptr.NullMacros: 'NULL'
      modernize-make-shared.IgnoreMacros: 'true'
      bugprone-dynamic-static-initializers.HeaderFileExtensions: ';h;hh;hpp;hxx'
      bugprone-suspicious-enum-usage.StrictMode: 'false'
      performance-unnecessary-copy-initialization.AllowedTypes: ''
      bugprone-suspicious-missing-comma.MaxConcatenatedTokens: '5'
      modernize-use-transparent-functors.SafeMode: 'false'
      cppcoreguidelines-narrowing-conversions.PedanticMode: 'false'
      modernize-make-shared.IgnoreDefaultInitialization: 'true'
      bugprone-not-null-terminated-result.WantToUseSafeFunctions: 'true'
      modernize-make-shared.IncludeStyle: llvm
      bugprone-string-constructor.LargeLengthThreshold: '8388608'
      misc-throw-by-value-catch-by-reference.CheckThrowTemporaries: 'true'
      cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField: '0'
      modernize-use-override.IgnoreDestructors: 'false'
      performance-inefficient-vector-operation.EnableProto: 'false'
      modernize-make-shared.MakeSmartPtrFunction: 'std::make_shared'
      modernize-loop-convert.MaxCopySize: '16'
      bugprone-argument-comment.CommentStringLiterals: '0'
      portability-simd-intrinsics.Suggest: 'false'
      cppcoreguidelines-explicit-virtual-functions.IgnoreDestructors: '1'
      performance-for-range-copy.AllowedTypes: ''
      modernize-make-shared.MakeSmartPtrFunctionHeader: '<memory>'
      modernize-make-unique.IgnoreMacros: 'true'
      bugprone-sizeof-expression.WarnOnSizeOfConstant: 'true'
      readability-redundant-string-init.StringNames: '::std::basic_string_view;::std::basic_string'
      modernize-make-unique.IgnoreDefaultInitialization: 'true'
      modernize-use-emplace.ContainersWithPushBack: '::std::vector;::std::list;::std::deque'
      modernize-make-unique.IncludeStyle: llvm
      bugprone-argument-comment.CommentBoolLiterals: '0'
      bugprone-argument-comment.CommentUserDefinedLiterals: '0'
      modernize-use-override.OverrideSpelling: override
      readability-redundant-declaration.IgnoreMacros: 'true'
      performance-inefficient-string-concatenation.StrictMode: 'false'
      google-readability-braces-around-statements.ShortStatementLines: '1'
      modernize-make-unique.MakeSmartPtrFunction: 'std::make_unique'
      cppcoreguidelines-pro-type-member-init.IgnoreArrays: 'false'
      bugprone-reserved-identifier.AllowedIdentifiers: ''
      modernize-use-emplace.IgnoreImplicitConstructors: 'false'
      modernize-make-unique.MakeSmartPtrFunctionHeader: '<memory>'
      modernize-use-equals-delete.IgnoreMacros: 'true'
      bugprone-misplaced-widening-cast.CheckImplicitCasts: 'false'
      bugprone-suspicious-missing-comma.RatioThreshold: '0.200000'
      modernize-loop-convert.MinConfidence: reasonable
      misc-throw-by-value-catch-by-reference.MaxSize: '-1'
      performance-unnecessary-value-param.AllowedTypes: ''
      modernize-use-noexcept.UseNoexceptFalse: 'true'
      google-readability-namespace-comments.SpacesBeforeComments: '2'
      cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic: '1'
      bugprone-argument-comment.IgnoreSingleArgument: '0'
      bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression: 'false'
      performance-faster-string-find.StringLikeClasses: '::std::basic_string;::std::basic_string_view'
      bugprone-assert-side-effect.CheckFunctionCalls: 'false'
      bugprone-string-constructor.StringNames: '::std::basic_string;::std::basic_string_view'
      bugprone-assert-side-effect.AssertMacros: assert,NSAssert,NSCAssert
      llvm-qualified-auto.AddConstToQualified: '0'
      cert-str34-c.CharTypdefsToIgnore: ''
      google-readability-function-size.StatementThreshold: '800'
      llvm-else-after-return.WarnOnConditionVariables: '0'
      cert-msc51-cpp.DisallowedSeedTypes: 'time_t,std::time_t'
      bugprone-sizeof-expression.WarnOnSizeOfCompareToConstant: 'true'
      bugprone-reserved-identifier.AggressiveDependentMemberLookup: 'false'
      modernize-use-equals-default.IgnoreMacros: 'true'
      modernize-raw-string-literal.DelimiterStem: lit
      misc-throw-by-value-catch-by-reference.WarnOnLargeObjects: 'false'
      modernize-raw-string-literal.ReplaceShorterLiterals: 'false'
      modernize-use-emplace.SmartPointers: '::std::shared_ptr;::std::unique_ptr;::std::auto_ptr;::std::weak_ptr'
      bugprone-dangling-handle.HandleClasses: 'std::basic_string_view;std::experimental::basic_string_view'
      performance-inefficient-vector-operation.VectorLikeClasses: '::std::vector'
      modernize-use-auto.RemoveStars: 'false'
      portability-simd-intrinsics.Std: ''
      performance-unnecessary-value-param.IncludeStyle: llvm
      modernize-replace-disallow-copy-and-assign-macro.MacroName: DISALLOW_COPY_AND_ASSIGN
      llvm-else-after-return.WarnOnUnfixable: '0'
      readability-simplify-subscript-expr.Types: '::std::basic_string;::std::basic_string_view;::std::vector;::std::array'